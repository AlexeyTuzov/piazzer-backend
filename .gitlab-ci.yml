image: docker:latest

stages:
  - build
  - deploy

variables:
  DOCKER_DRIVER: overlay2

services:
  - docker:dind

before_script:
  - docker info

# ======================================================== ENV =========================================================

.env_dev: &env_dev
  variables:
    SSH_HOST: ${SSH_HOST_DEV}
    SSH_USER: ${SSH_USER_DEV}
    SSH_PRIVATE_KEY: ${SSH_KEY_DEV}
    PROJECT_DIR: ${PROJECT_DIR_DEV}
  only:
    - develop

.env_prod: &env_prod
  environment: production
  only:
    - tags

# ======================================================= BUILD ========================================================

.build: &build
  stage: build
  allow_failure: false
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker build
      -t ${CI_REGISTRY_IMAGE}:${DOCKER_IMAGE_LATEST_TAG:-${CI_COMMIT_TAG:-${CI_COMMIT_REF_SLUG}}}
      --build-arg APP_NAME="\"${CI_PROJECT_TITLE}\""
      --build-arg RELEASE="${CI_COMMIT_TAG:-${CI_COMMIT_SHA}}"
      --build-arg GITLAB_USER=gitlab-ci-token
      --build-arg GITLAB_PASS=${CI_BUILD_TOKEN} .
    - docker push ${CI_REGISTRY_IMAGE}:${DOCKER_IMAGE_LATEST_TAG:-${CI_COMMIT_TAG:-${CI_COMMIT_REF_SLUG}}}

build_dev:
  <<: *build
  <<: *env_dev

build_prod:
  <<: *build
  <<: *env_prod

# ======================================================= DEPLOY =======================================================

.deploy: &deploy
  stage: deploy
  image: alpine:latest
  allow_failure: false
  before_script:
    - apk update
    - apk add openssh-client
    - which ssh-agent
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    - ssh -o stricthostkeychecking=no $SSH_USER@$SSH_HOST "
      cd \"$PROJECT_DIR\";
      docker login -u \"$CI_REGISTRY_USER\" -p \"$CI_REGISTRY_PASSWORD\" \"$CI_REGISTRY\";
      printf \"machine gitlab.com\n\tlogin gitlab-ci-token\n\tpassword ${CI_BUILD_TOKEN}\n\n\" >> \"\${HOME}/.netrc\";
      docker-compose -f ${DOCKER_COMPOSE_FILE} pull ${DOCKER_SERVICE} ;
      docker-compose -f ${DOCKER_COMPOSE_FILE} up -d ${DOCKER_SERVICE} ;
      docker image prune -a -f ;
      if [[ -f \"\${HOME}/.netrc\" ]]; then
      rm -v \"\${HOME}/.netrc\";
      fi;
      "

deploy_dev:
  <<: *deploy
  <<: *env_dev

deploy_prod:
  <<: *deploy
  <<: *env_prod
  when: manual
